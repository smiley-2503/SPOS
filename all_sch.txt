//round robin
#include <bits/stdc++.h>
using namespace std;

void input(int n,int at[],int bt[],int qnt,int pid[]){
	
    cout<<"Enter arrival time and burst time of processes"<<endl;
    for(int i=0;i<n;i++){
        cout<<"Process "<<i+1<<" ";
        cin>>at[i]>>bt[i];
        pid[i]=i+1;

    }
}

void round_robin(int n,int at[],int bt[],int ct[],int tat[],int wt[],int qnt){
    int min_at=INT_MAX;
    int max_at=INT_MIN;

    for(int i=0;i<n;i++){
        min_at=min(min_at,at[i]);
        max_at=max(max_at,at[i]);
    }

    int current_time=min_at;
    vector<int> ready_queue;

    for(int i=0;i<n;i++){
        if(at[i]==min_at){
            ready_queue.push_back(i);
        }
    }

    vector<int> ghant_chart;

    while(true){

        if(ready_queue.empty() && current_time>max_at){
            break;
        }

        if(ready_queue.empty()){
            current_time+=1;

            for(int i=0;i<n;i++){
                if(at[i]>current_time-qnt && at[i]<=current_time){
                    ready_queue.push_back(i);
                }
            }
        }
        else{
            int current_process=ready_queue[0];

            if(bt[current_process]-qnt>0){

                bt[current_process]-=qnt;
                current_time+=qnt;

                for(int i=0;i<n;i++){
                    if(at[i]>current_time-qnt && at[i]<=current_time){
                        ready_queue.push_back(i);
                    }
                }

                ready_queue.push_back(current_process);
                ghant_chart.push_back(current_process);
                ready_queue.erase(ready_queue.begin());
			

            }
            else{
                current_time+=bt[current_process];
                bt[current_process]=0;

                for(int i=0;i<n;i++){
                    if(at[i]>current_time-bt[current_process] && at[i]<=current_time){
                        ready_queue.push_back(i);
                    }
                }
                ct[current_process]=current_time;
                ghant_chart.push_back(current_process);
                ready_queue.erase(ready_queue.begin());
            }
        }
    }
    cout<<"Ghant chart = ";
    for(auto i:ghant_chart){
        cout<<"P"<<i+1<<" ";
    }
    cout<<endl;

    for(int i=0;i<n;++i){
        tat[i]=ct[i]-at[i];
        wt[i]=tat[i]-bt[i];
    }



}

void display(int n, int pid[], int at[], int bt[], int ct[], int tat[], int wt[]){

    cout<<"Process"<<" "<<"Arrival Time"<<" "<<"Burst Time"<<" "<<"Completion time"<<" "<<"Turn around time"<<"  "<<"Waiting Time"<<endl;
    for(int i=0;i<n;i++){
        cout<<pid[i]<<"       "<<at[i]<<"            "<<bt[i]<<"           "<<ct[i]<<"               "<<tat[i]<<"                 "<<wt[i]<<endl;
    }
    float avg_wt=0,avg_tat=0;
    for(int i=0;i<n;i++){
        avg_tat+=tat[i];
        avg_wt+=wt[i];
    }
    avg_wt/=n;
    avg_tat/=n;
    cout<<"Average Waiting time = "<< avg_wt<<endl;
    cout<<"Average Turn around time = "<< avg_tat<<endl;
}

int main(){
    int n=5;
    int at[n],bt[n],ct[n],tat[n],wt[n],pid[n];
    int arrivalTimes[] = {0, 1, 2, 3, 4};
    int burstTimes[] = {5, 3, 1, 2, 3};
    //string processIds[] = {"P1", "P2", "P3", "P4", "P5"};
int quantum=2;
    // Copy provided data into the arrays
    for (int i = 0; i < n; ++i) {
        at[i] = arrivalTimes[i];
        bt[i] = burstTimes[i];
        pid[i] = i + 1; // Assuming process IDs are numeric (P1, P2, ...)
    }
round_robin( n, at, bt, ct, tat, wt, quantum);
    display(n,pid,at,bt,ct,tat,wt);
    return 0;
}

//priority

#include <bits/stdc++.h>
using namespace std;

void input(int n,int at[],int bt[],int pid[],int prt[]){
    cout<<"Enter arrival time and burst time and priority of processes"<<endl;
    for(int i=0;i<n;i++){
        cout<<"Process "<<i+1<<" ";
        cin>>at[i]>>bt[i]>>prt[i];
        pid[i]=i+1;

    }
}

void calculate(int n,int at[],int bt[],int prt[],int ct[],int tat[],int wt[]){
    int rt[n];
    for(int i=0;i<n;i++){
        rt[i]=bt[i];
       // min_at=min(min_at,at[i]);

    }
    int complete=0,t=0,maxm=-1;
    int shortest,finish_time;

    prt[n]=-1;
    while(complete!=n){
        shortest=n;
        for(int i=0;i<n;i++){
            if(at[i]<=t && prt[i]>prt[shortest] && rt[i]>0){
                maxm=prt[i];
                shortest=i;
            }
        }

        t+=rt[shortest]-1;
        rt[shortest]=-1;
        complete++;
        finish_time=t+1;
        ct[shortest]=finish_time;
        wt[shortest]=finish_time-at[shortest]-bt[shortest];
        t++;
    }
    
    for(int i=0;i<n;i++){
        tat[i]=wt[i]+bt[i];
    }
}


void display(int n, int pid[], int at[], int bt[],int prt[], int ct[], int tat[], int wt[]){
    
    cout<<"Process"<<" "<<"Arrival Time"<<" "<<"Burst Time"<<" "<<"Priority"<<" "<<"Completion time"<<" "<<"Turn around time"<<"  "<<"Waiting Time"<<endl;
    for(int i=0;i<n;i++){
        cout<<pid[i]<<"       "<<at[i]<<"            "<<bt[i]<<"           "<<prt[i]<<"           "<<ct[i]<<"               "<<tat[i]<<"                 "<<wt[i]<<endl;
    }
    float avg_wt=0,avg_tat=0;
    for(int i=0;i<n;i++){
        avg_tat+=tat[i];
        avg_wt+=wt[i];
    }
    avg_wt/=n;
    avg_tat/=n;
    cout<<"Average Waiting time = "<< avg_wt<<endl;
    cout<<"Average Turn around time = "<< avg_tat<<endl;
}
int main(){

    cout<<"Enter no. of processes = ";
    int n;
    cin>>n;
    int at[n],bt[n],ct[n],tat[n],wt[n],pid[n],prt[n];
    input(n,at,bt,pid,prt);
    calculate(n,at,bt,prt,ct,tat,wt);
    cout<<endl;
    //sort_res(n,pid, at, bt,ct,tat, wt);
    display(n,pid,at,bt,prt,ct,tat,wt);

    return 0;
}

//sjf

#include <bits/stdc++.h>
using namespace std;

void input(int n,int at[],int bt[],int pid[]){
    cout<<"Enter arrival time and burst time of processes"<<endl;
    for(int i=0;i<n;i++){
        cout<<"Process "<<i+1<<" ";
        cin>>at[i]>>bt[i];
        pid[i]=i+1;

    }
}

void calculate(int n,int at[],int bt[],int ct[],int tat[],int wt[]){
    int rt[n];
    for(int i=0;i<n;i++){
        rt[i]=bt[i];
    }
    int complete=0,t=0,minm=INT_MAX;
    int shortest=0,finish_time;
    bool check=false;

    cout<<"Ghant chart = ";

    while(complete!=n){

        for(int j=0;j<n;j++){
            if((at[j]<=t) && (rt[j]<minm) && rt[j]>0){
                minm=rt[j];
                shortest=j;
                check=true;
            }
        }

        if(check==false){
            t++;
            continue;
        }


        rt[shortest]--;
        minm=rt[shortest];

        cout<<"P"<<shortest+1<<" ";

        if(minm==0){
            minm=INT_MAX;
        }

        if(rt[shortest]==0){
            complete++;
            check=false;
            finish_time=t+1;
            ct[shortest]=t+1;

            wt[shortest]=finish_time-bt[shortest]-at[shortest];

            if(wt[shortest]<0){
                wt[shortest]=0;
            }
        }
        t++;
    }

    for(int i=0;i<n;i++){
        tat[i]=wt[i]+bt[i];
    }


}

void sort_res(int n, int pid[], int at[], int bt[], int ct[], int tat[], int wt[]){
    for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n - i - 1; j++)
            {
                    if (pid[j] > pid[j + 1])
                    {
                        swap(pid[j],pid[j+1]);
                        swap(at[j],at[j+1]);
                        swap(bt[j],bt[j+1]);
                        swap(ct[j],ct[j+1]);
                        swap(tat[j],tat[j+1]);
                        swap(wt[j],wt[j+1]);
                    }
                    
                
                    
            }
        }
    
}

void display(int n, int pid[], int at[], int bt[], int ct[], int tat[], int wt[]){
	
    cout<<"Process"<<" "<<"Arrival Time"<<" "<<"Burst Time"<<" "<<"Completion time"<<" "<<"Turn around time"<<"  "<<"Waiting Time"<<endl;
    for(int i=0;i<n;i++){
        cout<<pid[i]<<"       "<<at[i]<<"            "<<bt[i]<<"           "<<ct[i]<<"               "<<tat[i]<<"                 "<<wt[i]<<endl;
    }
    float avg_wt=0,avg_tat=0;
    for(int i=0;i<n;i++){
        avg_tat+=tat[i];
        avg_wt+=wt[i];
    }
    avg_wt/=n;
    avg_tat/=n;
    cout<<"Average Waiting time = "<< avg_wt<<endl;
    cout<<"Average Turn around time = "<< avg_tat<<endl;
}
int main(){

    cout<<"Enter no. of processes = ";
    int n;
    cin>>n;
    int at[n],bt[n],ct[n],tat[n],wt[n],pid[n];
    input(n,at,bt,pid);
    calculate(n,at,bt,ct,tat,wt);
    cout<<endl;
    sort_res(n,pid, at, bt,ct,tat, wt);
    display(n,pid,at,bt,ct,tat,wt);

    return 0;
}

//fcfs
#include <bits/stdc++.h>
using namespace std;

void inputProcesses(vector<int>& arrival, vector<int>& burst) {
    int n = arrival.size();
    for (int i = 0; i < n; ++i) {
        cout << "Arrival and burst time of process " << i + 1 << ": ";
        cin >> arrival[i] >> burst[i];
    }
}
void bubbleSort(int n, vector<int>& arrival, vector<int>& burst, vector<int>& processIDs) {
for (int i = 0; i < n; i++) {
    for (int j = 0; j < n - (i + 1); j++) {
        if (arrival[j] > arrival[j + 1]) {
            swap(arrival[j], arrival[j + 1]);
            swap(burst[j], burst[j + 1]);
            swap(processIDs[j], processIDs[j + 1]);
        }
    }
}}
void calculateCompletion(vector<int>& arrival, vector<int>& burst, vector<int>& completion) {
    int n = arrival.size();
    int current_time = 0;
    for (int i = 0; i < n; ++i) {
        current_time = max(current_time, arrival[i]);
        completion[i] = current_time + burst[i];
        current_time = completion[i];
    }
}

void calculateTurnaroundAndWaiting(vector<int>& arrival, vector<int>& burst, vector<int>& completion, vector<int>& turnaround, vector<int>& waiting) {
    int n = arrival.size();
    for (int i = 0; i < n; ++i) {
        turnaround[i] = completion[i] - arrival[i];
        waiting[i] = turnaround[i] - burst[i];
    }
}

void displayGantt(vector<int>& completion, vector<int>& processIDs) {
    cout << "\nGantt Chart:\n";
    for (int c : processIDs) {
        cout << "| P" << c << " ";
    }
    cout << "|\n";
    for (int c : completion) {
        cout << c << "     ";
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    vector<int> arrival(n);
    vector<int> burst(n);
    vector<int> completion(n);
    vector<int> turnaround(n);
    vector<int> waiting(n);

    inputProcesses(arrival, burst);

    // Sorting by arrival time
    vector<int> processIDs(n);
    for (int i = 0; i < n; ++i) {
        processIDs[i] = i + 1;  // Process IDs start from 1
    }
     bubbleSort(n, arrival, burst, processIDs);

    for (int i = 0; i < n; ++i) {
        completion[i] = 0;
    }

    calculateCompletion(arrival, burst, completion);
    calculateTurnaroundAndWaiting(arrival, burst, completion, turnaround, waiting);
    displayGantt(completion, processIDs);

    float avg_waiting = 0, avg_turnaround = 0;
    for (int i = 0; i < n; ++i) {
        avg_waiting += waiting[i];
        avg_turnaround += turnaround[i];
    }

    avg_waiting /= n;
    avg_turnaround /= n;

    cout << "\nAverage waiting time: " << avg_waiting << endl;
    cout << "Average turnaround time: " << avg_turnaround << endl;

    return 0;
}
